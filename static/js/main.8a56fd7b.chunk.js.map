{"version":3,"sources":["TodoInput.js","TodoItem.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inputValue","handleChange","bind","assertThisInitialized","handleClick","e","setState","target","value","addTodo","react_default","a","createElement","type","onChange","onClick","Component","TodoItem","title","TodoList","list","tasks","map","todo","src_TodoItem","assign","key","id","App","uniqueId","resetTodo","_this$state","push","src_TodoInput","src_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gOA+BeA,cA1BX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACTC,WAAY,IAEhBR,EAAKS,aAAeT,EAAKS,aAAaC,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACpBA,EAAKY,YAAcZ,EAAKY,YAAYF,KAAjBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KANJA,4EAQNa,GACTV,KAAKW,SAAS,CACVN,WAAYK,EAAEE,OAAOC,8CAIzBb,KAAKJ,MAAMkB,QAAQd,KAAKI,MAAMC,6CAG9B,OACIU,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOC,KAAK,OAAOL,MAAOb,KAAKI,MAAMC,WAAYc,SAAUnB,KAAKM,eAChES,EAAAC,EAAAC,cAAA,UAAQG,QAASpB,KAAKS,aAAtB,wBArBQY,aCOTC,MARf,SAAmB1B,GACf,OACImB,EAAAC,EAAAC,cAAA,UACKrB,EAAM2B,QCYJC,mLAXP,IAAMC,EAAOzB,KAAKJ,MAAM8B,MAAMC,IAAI,SAAAC,GAC9B,OAAOb,EAAAC,EAAAC,cAACY,EAAD/B,OAAAgC,OAAA,GAAcF,EAAd,CAAoBG,IAAKH,EAAKI,QAEzC,OACIjB,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UAAKQ,WAPEJ,aC2CRY,qBA1Cb,SAAAA,EAAarC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAiC,IAClBpC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAmC,GAAA9B,KAAAH,KAAMJ,KACDQ,MAAQ,CACXsB,MAAO,CACH,CAACH,MAAO,oBAAWS,GAAI,GACvB,CAACT,MAAO,oBAAWS,GAAI,IAE3BE,SAAU,GAEZrC,EAAKiB,QAAUjB,EAAKiB,QAAQP,KAAbT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACfA,EAAKsC,UAAYtC,EAAKsC,UAAU5B,KAAfT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAVCA,uEAYZ0B,GAAO,IAAAa,EAGTpC,KAAKI,MADPsB,EAFWU,EAEXV,MAAOQ,EAFIE,EAEJF,SAETR,EAAMW,KAAK,CACTd,QACAS,GAAIE,IAENlC,KAAKW,SAAS,CACZe,QACAQ,SAAUA,EAAW,wCAIvBlC,KAAKW,SAAS,CACZe,MAAO,sCAIT,OACEX,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,UAAQG,QAASpB,KAAKmC,WAAtB,4BACApB,EAAAC,EAAAC,cAACqB,EAAD,CAAWxB,QAASd,KAAKc,UACzBC,EAAAC,EAAAC,cAACsB,EAAD,CAAUb,MAAO1B,KAAKI,MAAMsB,gBArClBL,cCOEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/B,EAAAC,EAAAC,cAAC8B,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.8a56fd7b.chunk.js","sourcesContent":["\nimport React, { Component } from \"react\";\n\n\nclass TodoInput extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            inputValue: ''\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleClick = this.handleClick.bind(this)\n    }\n    handleChange(e) {\n        this.setState({\n            inputValue: e.target.value\n        })\n    }\n    handleClick() {\n        this.props.addTodo(this.state.inputValue)\n    }\n    render () {\n        return (\n            <div>\n                <input type=\"text\" value={this.state.inputValue} onChange={this.handleChange} />\n                <button onClick={this.handleClick}>登録</button>\n            </div>\n        )\n    }\n}\n\nexport default TodoInput","\nimport React from \"react\";\n\nfunction TodoItem (props) {\n    return (\n        <li>\n            {props.title}\n        </li>\n    )\n}\n\nexport default TodoItem","\nimport React, { Component } from \"react\";\nimport TodoItem from './TodoItem'\n\n\nclass TodoList extends Component {\n    render () {\n        const list = this.props.tasks.map(todo => {\n            return <TodoItem {...todo} key={todo.id} />\n        })\n        return (\n            <div>\n                <ul>{list}</ul>\n            </div>\n        )\n    }\n}\n\nexport default TodoList","import React, { Component } from 'react';\nimport TodoInput from './TodoInput'\nimport TodoList from './TodoList'\nimport './App.css';\n\nclass App extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      tasks: [\n          {title: 'Todo1つ目', id: 0},\n          {title: 'Todo2つ目', id: 1}\n      ],\n      uniqueId: 2\n    }\n    this.addTodo = this.addTodo.bind(this)\n    this.resetTodo = this.resetTodo.bind(this)\n  }\n  addTodo(title) {\n    const {\n      tasks, uniqueId\n    } = this.state\n    tasks.push({\n      title,\n      id: uniqueId\n    })\n    this.setState({\n      tasks,\n      uniqueId: uniqueId + 1\n    })\n  }\n  resetTodo() {\n    this.setState({\n      tasks: []\n    })\n  }\n  render() {\n    return (\n      <div>\n        <h1>TODO App</h1>\n        <button onClick={this.resetTodo}>リセット</button>\n        <TodoInput addTodo={this.addTodo} />\n        <TodoList tasks={this.state.tasks} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}